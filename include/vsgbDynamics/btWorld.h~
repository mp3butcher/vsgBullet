/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2011 Robert
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/
// Written by J Valentin

#ifndef OSGBDYNAMICS_BTWORLD
#define OSGBDYNAMICS_BTWORLD 1

#include <osg/Node>
#include <osg/ShapeDrawable>
#include <osgPhysics/PhysicsAttribute>

namespace osgbDynamics {

  
  
/** The basic element of the physics abstract layer */
class OSGBDYNAMICS_EXPORT btWorld : public osg::NodeCallback
{
public:
    btWorld();
    btWorld( const btWorld& copy, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY );

    virtual bool isSameKindAs( const osg::Object* obj ) const { return dynamic_cast<const BaseElement*>(obj)!=NULL; }
    virtual const char* libraryName () const { return "osgbDynamics"; }
    virtual const char* className () const { return "btWorld"; }

    btDynamicWorld * getDynamicWorld(){return _btworld;}
    void  setDynamicWorld(btDynamicWorld *w){btworld=w  ;}



    /** Update the element */
    virtual void update( osg::Node* node, osg::NodeVisitor* nv );

    /** Do some post work if required */
    //virtual void postevent( osg::Node* node, osg::NodeVisitor* nv ) {}

    virtual void operator()( osg::Node* node, osg::NodeVisitor* nv );


protected:
    virtual ~btWorld();



private:
    btDynamicWorld* _btworld;
};

}

#endif
